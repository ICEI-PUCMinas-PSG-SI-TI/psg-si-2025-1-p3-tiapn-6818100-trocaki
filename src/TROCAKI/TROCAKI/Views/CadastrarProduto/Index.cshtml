@{
	ViewData["Title"] = "Cadastrar produto";
}

@{
    List<CategoriaModel> categorias = ViewBag.Caracteristicas as List<CategoriaModel>;
}

<div class="container py-5">
    <h3 class="text-center mb-4">Cadastrar novo produto</h3>

    <div class="card mx-auto shadow-sm" style="max-width: 500px;">
        <div class="card-body p-4">
            <form id="produtoForm" novalidate>
                <div class="mb-3">
                    <label for="nomeProduto" class="form-label">Nome do produto</label>
                    <input type="text" class="form-control rounded" id="nomeProduto" placeholder="Nome do produto" required>
                    <div class="invalid-feedback">Por favor, informe o nome do produto.</div>
                </div>

                <div class="mb-3">
                    <label for="descricao" class="form-label">Descrição</label>
                    <textarea class="form-control rounded" id="descricao" rows="3" placeholder="Descrição do produto" required></textarea>
                    <div class="invalid-feedback">Por favor, informe a descrição do produto.</div>
                </div>

                <div class="mb-3">
                    <label for="valor" class="form-label">Valor (R$)</label>
                    <input type="number" class="form-control rounded" id="valor" placeholder="Valor" min="0.01" step="0.01" required>
                    <div class="invalid-feedback">Informe um valor maior que zero.</div>
                </div>

                <div class="mb-3">
                    <label for="categoria" class="form-label">Categoria(s)</label>
                    <select class="form-select rounded" id="categoria" multiple required>
                        @foreach (CategoriaModel categoria in categorias)
                        {
                            <option value="@categoria.Id">@categoria.Nome</option>
                        }
                    </select>
                    <div class="form-text">Segure Ctrl (ou Cmd) para selecionar múltiplas categorias.</div>
                    <div class="invalid-feedback">Selecione pelo menos uma categoria.</div>
                </div>

                <div class="mb-3">
                    <label for="fotos" class="form-label">Fotos do Produto</label>
                    <input class="form-control" type="file" id="fotos" name="fotos" accept="image/*" multiple required>
                    <div class="invalid-feedback">  Selecione pelo menos uma imagem do produto. </div>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary rounded">Registrar Produto</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Toast container -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1100">
    <div id="toastMensagem" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastTexto">
                <!-- Mensagem de erro -->
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Fechar"></button>
        </div>
    </div>
</div>

<script>
	const form = document.getElementById('produtoForm');

	const campos = {
		nomeProduto: document.getElementById('nomeProduto'),
		descricao: document.getElementById('descricao'),
		valor: document.getElementById('valor'),
		categoria: document.getElementById('categoria'),
		fotos: document.getElementById('fotos')
	};

	// Função utilitária para validar campo obrigatório
	function validarCampo(input, condicaoValida) {
		if (!condicaoValida) {
			input.classList.add('is-invalid');
			return false;
		}
		input.classList.remove('is-invalid');
		return true;
	}

	// Exibir toast com mensagem e cor
	function exibirToast(mensagem, cor = 'danger') {
		const toastElement = document.getElementById('toastMensagem');
		const toastTexto = document.getElementById('toastTexto');

		toastElement.className = `toast align-items-center text-white bg-${cor} border-0`;
		toastTexto.textContent = mensagem;

		new bootstrap.Toast(toastElement, { delay: 4000 }).show();
	}

	// Converter várias imagens para base64
	function converterFotosParaBase64(inputFile) {
		return new Promise((resolve, reject) => {
			const arquivos = inputFile.files;
			if (!arquivos || arquivos.length === 0) {
				reject("Nenhum arquivo selecionado.");
				return;
			}

			const leitores = Array.from(arquivos).map(arquivo => {
				return new Promise((res, rej) => {
					const reader = new FileReader();
					reader.onload = () => res(reader.result);
					reader.onerror = () => rej(`Erro ao ler o arquivo: ${arquivo.name}`);
					reader.readAsDataURL(arquivo);
				});
			});

			Promise.all(leitores)
				.then(base64Array => resolve(base64Array))
				.catch(reject);
		});
	}

	form.addEventListener('submit', async function (event) {
		event.preventDefault();

		let valido = true;

		valido &= validarCampo(campos.nomeProduto, campos.nomeProduto.value.trim() !== '');
		valido &= validarCampo(campos.descricao, campos.descricao.value.trim() !== '');
		valido &= validarCampo(campos.valor, parseFloat(campos.valor.value) > 0);
		valido &= validarCampo(campos.categoria, [...campos.categoria.options].some(opt => opt.selected));
		valido &= validarCampo(campos.fotos, campos.fotos.files.length > 0);

		if (!valido) return;

		let fotosEmBase64;
		try {
			fotosEmBase64 = await converterFotosParaBase64(campos.fotos);
		} catch (erro) {
			exibirToast(erro);
			return;
		}

		const categoriasEscolhidas = [...campos.categoria.options]
			.filter(opt => opt.selected)
			.map(opt => ({ id: opt.value, nome: opt.innerText }));

		const VendedorId = localStorage.getItem("user_id");

		const payload = {
			nome: campos.nomeProduto.value,
			descricao: campos.descricao.value,
			valor: campos.valor.value,
			categorias: categoriasEscolhidas,
			fotos: fotosEmBase64,
			vendedorId: VendedorId
		};

		try {
			const res = await fetch('/CadastrarProduto/Cadastrar', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(payload)
			});

			const resultado = await res.json();

			if (!resultado.sucesso) {
				exibirToast(resultado.mensagem || "Erro ao cadastrar produto.");
				return;
			}

			window.location.href = "/Produto?id=" + resultado.id;
		} catch (err) {
			exibirToast("Erro de comunicação com o servidor.");
		}
	});
</script>
