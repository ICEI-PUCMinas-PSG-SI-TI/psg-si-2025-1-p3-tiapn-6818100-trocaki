@{
	ViewData["Title"] = "Login";
}

<div class="container d-flex justify-content-center align-items-center vh-100">
	<div class="card p-4 shadow-sm" style="max-width: 450px; width: 100%;">
		<h5 class="mb-3">Conta</h5>

		<!-- Navegação de abas -->
		<ul class="nav nav-pills mb-3 justify-content-between bg-light rounded-pill p-1" id="pills-tab" role="tablist">
			<li class="nav-item w-50" role="presentation">
				<button class="nav-link active" id="login-tab" data-bs-toggle="pill" data-bs-target="#login" type="button"
						role="tab">
					Login
				</button>
			</li>
			<li class="nav-item w-50" role="presentation">
				<button class="nav-link" id="cadastro-tab" data-bs-toggle="pill" data-bs-target="#cadastro"
						type="button" role="tab">
					Cadastre-se
				</button>
			</li>
		</ul>

		<div class="tab-content" id="pills-tabContent">
			<!-- Aba Login -->
			<div class="tab-pane fade show active" id="login" role="tabpanel">
				<form id="loginForm" novalidate>
					<div class="mb-3">
						<input type="email" id="emailLogin" class="form-control" placeholder="E-mail" required>
						<div class="invalid-feedback">Por favor, insira um e-mail válido.</div>
					</div>
					<div class="mb-4">
						<input type="password" id="senhaLogin" class="form-control" placeholder="Senha" required>
						<div class="invalid-feedback">Por favor, insira sua senha.</div>
					</div>
					<button type="submit" class="btn btn-primary w-100">Realizar Login</button>
				</form>
			</div>

			<!-- Aba Cadastro -->
			<div class="tab-pane fade" id="cadastro" role="tabpanel">
				<form id="formulario" class="needs-validation" novalidate>
					<div class="mb-2">
						<input type="text" id="nome" class="form-control" placeholder="Nome Completo" required>
						<div class="invalid-feedback">Informe nome e sobrenome.</div>
					</div>
					<div class="mb-2">
						<input type="email" id="email" class="form-control" placeholder="E-mail" required>
						<div class="invalid-feedback">Informe um e-mail válido.</div>
					</div>
					<div class="mb-2">
						<input type="text" id="telefone" class="form-control" placeholder="Telefone" maxlength="15"
							   required>
						<div class="invalid-feedback">Telefone inválido (use o formato (99) 99999-9999).</div>
					</div>
					<div class="mb-2">
						<input type="text" id="cpf" class="form-control" placeholder="CPF" maxlength="14" required>
						<div class="invalid-feedback">CPF inválido (use o formato 999.999.999-99).</div>
					</div>
					<div class="mb-2">
						<input type="date" id="nascimento" class="form-control" required>
						<div class="invalid-feedback">Informe sua data de nascimento.</div>
					</div>
					<div class="mb-2">
						<input type="text" id="cidade" class="form-control" placeholder="Cidade" required>
						<div class="invalid-feedback">Informe sua cidade.</div>
					</div>
					<div class="mb-2">
						<input type="file" id="arquivo" class="form-control" required>
						<div class="invalid-feedback">Envie um arquivo.</div>
					</div>
					<div class="mb-2">
						<input type="password" id="senha" class="form-control" placeholder="Senha" required>
						<div class="invalid-feedback">Informe uma senha.</div>
					</div>
					<div class="mb-3">
						<input type="password" id="confirmarSenha" class="form-control" placeholder="Confirmar Senha"
							   required>
						<div class="invalid-feedback">As senhas devem coincidir.</div>
					</div>
					<button type="submit" class="btn btn-primary w-100">Próximo</button>
				</form>
			</div>
		</div>
	</div>
</div>

<script>
	const mascaraInput = (input, pattern) => {
		input.addEventListener('input', () => {
			let value = input.value.replace(/\D/g, '');
			let i = 0;
			input.value = pattern.replace(/9/g, () => value[i++] || '');
		});
	}

	mascaraInput(document.getElementById('telefone'), '(99) 99999-9999');
	mascaraInput(document.getElementById('cpf'), '999.999.999-99');

	function validarNomeCompleto(nome) {
		return nome.trim().split(' ').length >= 2;
	}

	function exibirErro(input, condicaoValida) {
		if (!condicaoValida) {
			input.classList.add('is-invalid');
			input.classList.remove('is-valid');
			return false;
		} else {
			input.classList.remove('is-invalid');
			input.classList.add('is-valid');
			return true;
		}
	}

	function converterImagemParaBase64(inputFile) {
	  return new Promise((resolve, reject) => {
		const arquivo = inputFile.files[0];
		if (!arquivo) {
		  reject("Nenhum arquivo selecionado.");
		  return;
		}

		const reader = new FileReader();

		reader.onload = () => resolve(reader.result);
		reader.onerror = (error) => reject(error);

		reader.readAsDataURL(arquivo);
	  });
	}

	document.getElementById('formulario').addEventListener('submit', async function (event) {
		event.preventDefault();
		let valido = true;

		const nome = document.getElementById('nome');
		const email = document.getElementById('email');
		const telefone = document.getElementById('telefone');
		const cpf = document.getElementById('cpf');
		let nascimento = document.getElementById('nascimento');
		const cidade = document.getElementById('cidade');
		const arquivo = document.getElementById('arquivo');
		const senha = document.getElementById('senha');
		const confirmarSenha = document.getElementById('confirmarSenha');

		valido &= exibirErro(nome, validarNomeCompleto(nome.value));
		valido &= exibirErro(email, email.value.trim() !== '');
		valido &= exibirErro(telefone, telefone.value.length === 15);
		valido &= exibirErro(cpf, cpf.value.length === 14);
		valido &= exibirErro(nascimento, nascimento.value !== '');
		valido &= exibirErro(cidade, cidade.value.trim() !== '');
		valido &= exibirErro(arquivo, arquivo.value !== '');
		valido &= exibirErro(senha, senha.value !== '');
		valido &= exibirErro(confirmarSenha, senha.value !== '' && confirmarSenha.value === senha.value);

		if (!valido) return;

		const fotobase64 = await converterImagemParaBase64(arquivo);
		if (!fotobase64) {
			alert("Não foi possível carregar a foto do documento.");
			return;
		}

		const res = await fetch("/UsuarioConta/Cadastrar", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({
				nome: nome.value,
				email: email.value,
				telefone: telefone.value,
				cpf: cpf.value,
				dataNascimento: nascimento.value,
				cidade: cidade.value,
				fotoDocumento: fotobase64,
				senha: senha.value
			})
		});

		const resultado = await res.json();

		if (resultado.sucesso && resultado.id) {
			localStorage.setItem("user_id", resultado.id);
			window.location.href = "/";
		} else {
			window.alert("Usuário não encontrado.");
		}
	});

	document.getElementById('loginForm').addEventListener('submit', async function (event) {
		event.preventDefault();

		const emailLogin = document.getElementById('emailLogin');
		const senhaLogin = document.getElementById('senhaLogin');

		const emailValido = exibirErro(emailLogin, emailLogin.value.trim() !== '');
		const senhaValida = exibirErro(senhaLogin, senhaLogin.value.trim() !== '');

		if (!emailValido || !senhaValida) return;

		const res = await fetch("/UsuarioConta/Logar", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ 
				email: emailLogin.value,
				senha: senhaLogin.value
			})
		});

		const resultado = await res.json();

		if (resultado.sucesso && resultado.id) {
			localStorage.setItem("user_id", resultado.id);
			window.location.href = "/";
		} else {
			window.alert("Usuário não encontrado.");
		}
	});
</script>